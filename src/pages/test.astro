---
import Input from "@/components/primitives/input.astro";
import Layout from "@/layouts/Layout.astro";
import Button from "@/components/primitives/button.astro";
import Textarea from "@/components/primitives/textarea.astro";
import Select from "@/components/primitives/select.astro";
import Option from "@/components/primitives/option.astro";
import Label from "@/components/primitives/label.astro";
import Checkbox from "@/components/primitives/checkbox.astro";
import Tabs from "@/components/primitives/tabs.astro";
import TabsList from "@/components/primitives/tabs-list.astro";
import TabsTrigger from "@/components/primitives/tabs-trigger.astro";
import TabsContent from "@/components/primitives/tabs-content.astro";

const response = await fetch("https://restcountries.com/v3.1/all");
const countries = await response.json();
const sortedCountries = countries
  .map((country: { name: { common: any }; cca2: any }) => ({
    name: country.name.common,
    code: country.cca2,
  }))
  .sort((a: { name: string }, b: { name: any }) =>
    a.name.localeCompare(b.name),
  );

const errors = {
  name: "",
  email: "",
  country: "",
  message: "",
};

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const name = data.get("name");
    const email = data.get("email");
    const country = data.get("country");
    const message = data.get("message");
    if (typeof name !== "string" || name.trim() === "" || name.length < 1) {
      errors.name = "Please enter a valid name";
    }

    if (typeof email !== "string" || email.trim() === "" || email.length < 1) {
      errors.email = "Please enter a valid email";
    }

    if (
      typeof country !== "string" ||
      country.trim() === "" ||
      country.length < 1
    ) {
      errors.country = "Please select a country";
    }

    if (
      typeof message !== "string" ||
      message.trim() === "" ||
      message.length < 1
    ) {
      errors.message = "Please enter a message";
    }

    const hasErrors = Object.values(errors).some((msg) => msg);

    if (!hasErrors) {
      await fetch("/api/submit-form", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name,
          email,
          country,
          message,
        }),
      });
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<Layout>
  <main class="min-h-screen p-8">
    <div class="max-w-2xl mx-auto space-y-12 mt-16">
      <form class="space-y-6" method="POST">
        <div class="flex flex-col gap-2">
          <Label htmlFor="name" size={"default"} optional>Full Name </Label>
          <Input
            type="text"
            id="name"
            name="name"
            placeholder="Enter your name"
            error={!!errors.name}
          />
          {errors.name && <p class="text-sm text-destructive">{errors.name}</p>}
        </div>

        <div class="flex flex-col gap-2">
          <Label htmlFor="email" required>Email</Label>
          <Input
            type="email"
            id="email"
            name="email"
            placeholder="Enter your email"
            pattern="[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+"
            error={!!errors.email}
          />
          {
            errors.email && (
              <p class="text-sm text-destructive">{errors.email}</p>
            )
          }
        </div>

        <div class="flex flex-col gap-2">
          <Label htmlFor="country" required>Country</Label>
          <Select
            placeholder="Choose a country"
            name="country"
            error={!!errors.country}
          >
            {
              sortedCountries.map(
                (country: { code: string; name: unknown }) => (
                  <Option value={country.code}>{country.name}</Option>
                ),
              )
            }
          </Select>
          {
            errors.country && (
              <p class="text-sm text-destructive">{errors.country}</p>
            )
          }
        </div>

        <div class="flex flex-col gap-2">
          <Label htmlFor="message" required>Message</Label>
          <Textarea
            id="message"
            name="message"
            placeholder="Type your message here..."
            error={!!errors.message}
          />
          {
            errors.message && (
              <p class="text-sm text-destructive">{errors.message}</p>
            )
          }
        </div>

        <Label class="flex items-center gap-1">
          <Checkbox />
          Falls back to default appearance
        </Label>

        <Button type="submit" class="w-full">Submit Form</Button>
      </form>

      <Tabs defaultValue="tab1" variant={"underline"}>
        <TabsList>
          <TabsTrigger value="tab1">Tab 1</TabsTrigger>
          <TabsTrigger value="tab2">Tab 2</TabsTrigger>
          <TabsTrigger value="tab3">Tab 3</TabsTrigger>
        </TabsList>
        <TabsContent value="tab1">Contenido 1</TabsContent>
        <TabsContent value="tab2">Contenido 2</TabsContent>
        <TabsContent value="tab3">Contenido 3</TabsContent>
      </Tabs>
    </div>
  </main>
</Layout>
