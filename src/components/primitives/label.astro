---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const labelVariants = cva(
  "flex text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 transition-colors duration-200",
  {
    variants: {
      size: {
        sm: "text-xs",
        default: "text-sm",
        lg: "text-base",
      },
      variant: {
        default: "text-foreground",
        muted: "text-muted-foreground",
        destructive: "text-destructive",
      },
    },
    defaultVariants: {
      size: "default",
      variant: "default",
    },
  },
);

interface Props
  extends VariantProps<typeof labelVariants>,
    HTMLAttributes<"label"> {
  htmlFor?: string;
  optional?: boolean;
  required?: boolean;
}

const {
  size,
  variant,
  class: className,
  optional,
  required,
  ...props
} = Astro.props;
---

<label class={cn(labelVariants({ size, variant }), className)} {...props}>
  <slot />
  {
    optional && (
      <span class="ml-1.5 text-xs font-normal text-muted-foreground">
        (optional)
      </span>
    )
  }
  {
    required && (
      <span class="ml-0.5 text-destructive" aria-hidden="true">
        *
      </span>
    )
  }
</label>
