---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const backgroundVariants = cva(
  [
    "relative",
    "w-full",
    "h-full",
    "transition-all",
    "duration-300",
    "ease-in-out",
  ],
  {
    variants: {
      variant: {
        dots: [
          "[background-image:radial-gradient(hsl(var(--foreground)/0.1)_1px,transparent_1px)]",
          "dark:[background-image:radial-gradient(hsl(var(--foreground)/0.15)_1px,transparent_1px)]",
        ],
        grid: [
          "[background-image:linear-gradient(hsl(var(--foreground)/0.1)_1px,transparent_1px),linear-gradient(90deg,hsl(var(--foreground)/0.1)_1px,transparent_1px)]",
          "dark:[background-image:linear-gradient(hsl(var(--foreground)/0.15)_1px,transparent_1px),linear-gradient(90deg,hsl(var(--foreground)/0.15)_1px,transparent_1px)]",
        ],
        gradient: [
          "[background-image:linear-gradient(175deg,hsl(var(--primary)/0.15)_0%,hsl(var(--secondary)/0.08)_100%)]",
          "dark:[background-image:linear-gradient(175deg,hsl(var(--primary)/0.25)_0%,hsl(var(--secondary)/0.15)_100%)]",
        ],
        checker: [
          "[background-image:linear-gradient(45deg,hsl(var(--foreground)/0.1)_25%,transparent_25%),linear-gradient(-45deg,hsl(var(--foreground)/0.1)_25%,transparent_25%),linear-gradient(45deg,transparent_75%,hsl(var(--foreground)/0.1)_75%),linear-gradient(-45deg,transparent_75%,hsl(var(--foreground)/0.1)_75%)]",
          "dark:[background-image:linear-gradient(45deg,hsl(var(--foreground)/0.15)_25%,transparent_25%),linear-gradient(-45deg,hsl(var(--foreground)/0.15)_25%,transparent_25%),linear-gradient(45deg,transparent_75%,hsl(var(--foreground)/0.15)_75%),linear-gradient(-45deg,transparent_75%,hsl(var(--foreground)/0.15)_75%)]",
        ],
      },
      size: {
        sm: "[background-size:16px_16px]",
        md: "[background-size:24px_24px]",
        lg: "[background-size:32px_32px]",
        xl: "[background-size:48px_48px]",
      },
    },
    compoundVariants: [
      // Dots
      { variant: "dots", size: "sm", class: "[background-size:8px_8px]" },
      { variant: "dots", size: "md", class: "[background-size:16px_16px]" },
      { variant: "dots", size: "lg", class: "[background-size:24px_24px]" },
      { variant: "dots", size: "xl", class: "[background-size:32px_32px]" },
      // Grid
      { variant: "grid", size: "sm", class: "[background-size:16px_16px]" },
      { variant: "grid", size: "md", class: "[background-size:24px_24px]" },
      { variant: "grid", size: "lg", class: "[background-size:32px_32px]" },
      { variant: "grid", size: "xl", class: "[background-size:48px_48px]" },
      // Checker
      { variant: "checker", size: "sm", class: "[background-size:8px_8px]" },
      { variant: "checker", size: "md", class: "[background-size:16px_16px]" },
      { variant: "checker", size: "lg", class: "[background-size:24px_24px]" },
      { variant: "checker", size: "xl", class: "[background-size:32px_32px]" },
    ],
    defaultVariants: {
      variant: "dots",
      size: "md",
    },
  },
);

interface Props
  extends VariantProps<typeof backgroundVariants>,
    Omit<HTMLAttributes<"div">, "size"> {
  class?: string;
}

const { variant, size, class: className, ...rest } = Astro.props;

const backgroundClasses = cn(backgroundVariants({ variant, size }), className);
---

<div class={backgroundClasses} {...rest}>
  <slot />
</div>
