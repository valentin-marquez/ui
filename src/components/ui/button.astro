---
import type { HTMLAttributes } from 'astro/types';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';

const buttonVariants = cva(
  [
    'inline-flex items-center justify-center',
    'font-medium',
    'transition-colors duration-200 ease-in-out',
    'active:transition-transform duration-100',
    'focus:outline-none',
    'disabled:opacity-50 disabled:cursor-not-allowed',
    'cursor-pointer',
    'select-none',
  ],
  {
    variants: {
      variant: {
        default: [
          'bg-primary text-primary-foreground hover:bg-primary/90',
          'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
          'active:scale-[0.98] active:opacity-70',
        ],
        secondary: [
          'bg-secondary text-secondary-foreground hover:bg-secondary/90',
          'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
          'active:scale-[0.98] active:opacity-70',
        ],
        destructive: [
          'bg-destructive text-destructive-foreground hover:bg-destructive/90',
          'focus-visible:ring-destructive',
          'active:scale-[0.98]',
        ],

        outline: [
          'border border-primary bg-background text-primary hover:bg-primary hover:text-primary-foreground',
          'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
          'active:scale-[0.98] active:bg-primary/90',
        ],
        ghost: [
          'hover:bg-accent hover:text-accent-foreground',
          'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
          'active:scale-[0.98] active:bg-accent/50',
        ],
        link: [
          'text-primary underline-offset-4 hover:underline',
          'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary',
          'active:text-primary/70',
        ],
      },
      rounded: {
        none: 'rounded-none',
        sm: 'rounded-sm',
        md: 'rounded-md',
        lg: 'rounded-lg',
        full: 'rounded-full',
        left: 'rounded-l-md',
        right: 'rounded-r-md',
      },
      state: {
        success:
          'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500',
        error:
          'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        pressed: 'bg-accent/50',
        selected: 'bg-primary text-primary-foreground',
      },
      size: {
        sm: 'h-8 px-2.5 py-1.5 text-sm',
        md: 'h-10 px-4 py-2',
        lg: 'h-12 px-6 py-3 text-lg',
        xl: 'h-14 px-8 py-4 text-xl',
        icon: 'h-10 w-10 p-2',
      },
      full: {
        true: 'w-full',
        false: '',
      },
      icon: {
        true: 'p-0',
        false: '',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'md',
      rounded: 'md',
      full: false,
      icon: false,
    },
  }
);

// Define button props interface
export interface ButtonProps extends VariantProps<typeof buttonVariants> {
  class?: string;
  disabled?: boolean;
  loading?: boolean;
  loadingText?: string;
  pressed?: boolean;
  expanded?: boolean;
  selected?: boolean;
  controls?: string;
  ripple?: boolean;
  href?: string;
  target?: string;
  type?: 'button' | 'submit' | 'reset';
  onClick?: () => void;
  onKeyDown?: (event: KeyboardEvent) => void;
}

// Define component props
type Props = ButtonProps & (HTMLAttributes<'button'> | HTMLAttributes<'a'>);

const {
  variant,
  size,
  state,
  rounded,
  disabled = false,
  loading = false,
  loadingText,
  pressed,
  expanded,
  selected,
  controls,
  icon = false,
  full = false,
  ripple = false,
  href,
  target,
  type = 'button',
  class: className,
  onClick,
  onKeyDown,
  ...rest
} = Astro.props;

// Determine element type and base props
const Element = href ? 'a' : 'button-astro';

// Prepare common props
const commonProps = {
  class: cn(
    buttonVariants({
      variant,
      size,
      state,
      rounded,
      full,
      icon,
    }),
    ripple && 'overflow-hidden',
    className
  ),
  'aria-disabled': disabled || loading,
  'aria-busy': loading,
  'aria-pressed': pressed,
  'aria-expanded': expanded,
  'aria-controls': controls,
  'data-loading': loading,
  'data-state': state,
  'data-selected': selected,
  'data-icon-only': icon,
  'data-ripple': ripple,
  ...rest,
};

// Prepare element-specific props
const elementProps = {
  ...commonProps,
  ...(href
    ? {
        href,
        target,
        role: 'button',
      }
    : {
        type,
        disabled: disabled || loading,
        ...(onClick && { onclick: `(${onClick.toString()})()` }),
        ...(onKeyDown && { onkeydown: `(${onKeyDown.toString()})()` }),
      }),
} as const;
---

<Element {...elementProps}>
  {
    loading && (
      <span class:list={[icon ? '' : 'mr-2', 'animate-spin']}>
        <svg class="w-4 h-4" viewBox="0 0 24 24">
          <circle
            class="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="4"
            fill="none"
          />
          <path
            class="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          />
        </svg>
      </span>
    )
  }
  {loading ? <span>{loadingText || <slot />}</span> : <slot />}
</Element>
<style>
  :root {
    --pressed-scale: 0.98;
  }

  button-astro:not([disabled]):active,
  a:not([disabled]):active {
    transform: scale(var(--pressed-scale));
    transition: transform 0.1s ease-in-out;
    box-shadow: inset 0 2px 4px var(--ring);
  }

  button-astro:focus-visible,
  a:focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
    ring-offset-color: var(--ring) / 0.5;
  }

  button-astro,
  a {
    transition: all 0.2s ease-in-out;
    position: relative;
    overflow: hidden;
  }

  button-astro[disabled],
  a[disabled] {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none !important;
    box-shadow: none !important;
  }

  button-astro[data-ripple='true']::after,
  a[data-ripple='true']::after {
    content: '';
    display: block;
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    pointer-events: none;
    background-image: radial-gradient(
      circle,
      currentColor 10%,
      transparent 10.01%
    );
    background-repeat: no-repeat;
    background-position: 50%;
    transform: scale(10, 10);
    opacity: 0;
    transition:
      transform 0.5s,
      opacity 1s;
  }

  button-astro[data-ripple='true']:active::after,
  a[data-ripple='true']:active::after {
    transform: scale(0, 0);
    opacity: 0.2;
    transition: 0s;
  }
</style>

<script>
  class Button extends HTMLElement {
    constructor() {
      super();
      this.setupEventHandlers();
    }

    setupEventHandlers() {
      this.setupClick();
      this.setupKeyboard();
      if (this.dataset.ripple === 'true') {
        this.setupRipple();
      }
    }

    setupClick() {
      const onClick = this.getAttribute('onclick');
      if (!onClick) return;

      this.addEventListener('click', (e) => {
        if (this.dataset.loading === 'true' || this.hasAttribute('disabled')) {
          e.preventDefault();
          return;
        }

        try {
          new Function(onClick).call(this);
        } catch (error) {
          console.error('Error executing onClick handler:', error);
        }
      });
    }

    setupKeyboard() {
      this.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.click();
        }

        const onKeyDown = this.getAttribute('onkeydown');
        if (onKeyDown) {
          try {
            new Function('event', onKeyDown).call(this, e);
          } catch (error) {
            console.error('Error executing onKeyDown handler:', error);
          }
        }
      });
    }

    setupRipple() {
      this.addEventListener('click', (e) => {
        if (this.dataset.loading === 'true' || this.hasAttribute('disabled'))
          return;

        const rect = this.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        this.style.setProperty('--ripple-x', x + 'px');
        this.style.setProperty('--ripple-y', y + 'px');

        this.classList.remove('ripple-active');
        void this.offsetWidth;
        this.classList.add('ripple-active');
      });
    }
  }

  customElements.define('button-astro', Button);
</script>
