---
import type { HTMLAttributes } from 'astro/types';
import { cn } from '@/lib/utils';

export interface TabProps extends HTMLAttributes<'button'> {
  value: string;
  disabled?: boolean;
  class?: string;
  icon?: string;
  badge?: string | number;
}

export interface TabsProps extends HTMLAttributes<'div'> {
  defaultValue?: string;
  orientation?: 'horizontal' | 'vertical';
  variant?: 'default' | 'pills' | 'underline';
  size?: 'sm' | 'md' | 'lg';
  class?: string;
  onValueChange?: (value: string) => void;
}

const {
  defaultValue,
  orientation = 'horizontal',
  variant = 'default',
  size = 'md',
  class: className,
  onValueChange,
  ...props
} = Astro.props as TabsProps;

const sizeClasses = {
  sm: 'p-1.5 gap-1.5',
  md: 'p-2 gap-2',
  lg: 'p-3 gap-3',
};

const variantClasses = {
  default: 'bg-background border border-border rounded-lg shadow-sm',
  pills: 'p-1 bg-muted/20 rounded-lg backdrop-blur-sm',
  underline: 'border-b border-border',
};
---

<div
  class={cn(
    'tabs-root relative',
    orientation === 'vertical' ? 'flex' : 'inline-flex flex-col',
    variant !== 'underline' && 'p-0.5',
    className
  )}
  {...props}
>
  <div
    class={cn(
      'tabs-list relative',
      variantClasses[variant],
      sizeClasses[size],
      orientation === 'horizontal' ? 'flex' : 'flex-col border-r border-border',
      variant === 'pills' && 'gap-1'
    )}
    role="tablist"
    aria-orientation={orientation}
    data-orientation={orientation}
    data-variant={variant}
  >
    <slot name="tab-list" />
    {
      variant !== 'pills' && (
        <div
          class={cn(
            'absolute bg-primary transition-all duration-300 ease-spring',
            variant === 'underline'
              ? cn(
                  orientation === 'horizontal'
                    ? 'bottom-0 h-0.5 left-0'
                    : 'right-0 w-0.5 top-0',
                  'rounded-full'
                )
              : cn(
                  'bg-accent/50 backdrop-blur-sm',
                  orientation === 'horizontal'
                    ? 'h-[calc(100%-0.25rem)] top-[0.125rem]'
                    : 'w-[calc(100%-0.25rem)] left-[0.125rem]',
                  'rounded-md shadow-sm ring-1 ring-border/50'
                )
          )}
          data-active-indicator
        />
      )
    }
  </div>
  <div
    class={cn(
      'tabs-content relative',
      orientation === 'horizontal' ? 'mt-4' : 'ml-4',
      'min-h-[100px]'
    )}
  >
    <slot name="tab-content" />
  </div>
</div>

<script>
  class TabsManager {
    private root: HTMLElement;
    private tabs: HTMLElement[];
    private panels: HTMLElement[];
    private indicator: HTMLElement | null;
    private activeTab: HTMLElement | null = null;
    private orientation: 'horizontal' | 'vertical';
    private variant: string;

    constructor(root: HTMLElement) {
      this.root = root;
      this.tabs = Array.from(root.querySelectorAll('[role="tab"]'));
      this.panels = Array.from(root.querySelectorAll('[role="tabpanel"]'));
      this.indicator = root.querySelector('[data-active-indicator]');
      const tabList = root.querySelector('[role="tablist"]');
      this.orientation =
        (tabList?.getAttribute('data-orientation') as
          | 'horizontal'
          | 'vertical') || 'horizontal';
      this.variant = tabList?.getAttribute('data-variant') || 'default';

      this.init();
    }

    private init() {
      const defaultTab = this.tabs.find((tab) => !tab.hasAttribute('disabled'));
      if (defaultTab) {
        this.activateTab(defaultTab as HTMLElement);
      }

      this.tabs.forEach((tab) => {
        tab.addEventListener('click', () => {
          if (!tab.hasAttribute('disabled')) {
            this.activateTab(tab as HTMLElement);
          }
        });

        tab.addEventListener('keydown', (e) => {
          const targetTab = this.getTargetTab(e);
          if (targetTab) {
            e.preventDefault();
            this.activateTab(targetTab);
          }
        });
      });

      this.panels.forEach((panel) => {
        panel.addEventListener('beforematch', () => {
          panel.classList.add('motion-safe:animate-fadeIn');
        });
      });
    }

    private activateTab(tab: HTMLElement) {
      if (this.activeTab === tab) return;

      this.tabs.forEach((t) => {
        t.setAttribute('aria-selected', 'false');
        t.setAttribute('tabindex', '-1');
        t.setAttribute('data-state', 'inactive');
      });

      tab.setAttribute('aria-selected', 'true');
      tab.setAttribute('tabindex', '0');
      tab.setAttribute('data-state', 'active');
      tab.focus();

      const panelId = tab.getAttribute('aria-controls');
      this.panels.forEach((panel) => {
        if (panel.id === panelId) {
          panel.hidden = false;
          panel.classList.add('motion-safe:animate-fadeIn');
        } else {
          panel.hidden = true;
          panel.classList.remove('motion-safe:animate-fadeIn');
        }
      });

      if (this.indicator && this.variant !== 'pills') {
        const tabRect = tab.getBoundingClientRect();
        const listRect = this.root
          .querySelector('[role="tablist"]')!
          .getBoundingClientRect();

        if (this.orientation === 'horizontal') {
          this.indicator.style.left = `${tabRect.left - listRect.left}px`;
          this.indicator.style.width = `${tabRect.width}px`;
        } else {
          this.indicator.style.top = `${tabRect.top - listRect.top}px`;
          this.indicator.style.height = `${tabRect.height}px`;
        }
      }

      this.activeTab = tab;

      const value = tab.getAttribute('data-value');
      if (value) {
        const event = new CustomEvent('tabs-change', { detail: { value } });
        this.root.dispatchEvent(event);
      }
    }

    private getTargetTab(e: KeyboardEvent): HTMLElement | null {
      const target = e.target as HTMLElement;
      const currentIdx = this.tabs.indexOf(target);

      if (currentIdx === -1) return null;

      let nextIdx: number | null = null;

      if (this.orientation === 'horizontal') {
        switch (e.key) {
          case 'ArrowLeft':
            nextIdx = currentIdx - 1;
            break;
          case 'ArrowRight':
            nextIdx = currentIdx + 1;
            break;
          case 'Home':
            nextIdx = 0;
            break;
          case 'End':
            nextIdx = this.tabs.length - 1;
            break;
        }
      } else {
        switch (e.key) {
          case 'ArrowUp':
            nextIdx = currentIdx - 1;
            break;
          case 'ArrowDown':
            nextIdx = currentIdx + 1;
            break;
          case 'Home':
            nextIdx = 0;
            break;
          case 'End':
            nextIdx = this.tabs.length - 1;
            break;
        }
      }

      if (nextIdx !== null) {
        nextIdx = this.getNextEnabledTab(nextIdx);
        return nextIdx !== null ? (this.tabs[nextIdx] as HTMLElement) : null;
      }

      return null;
    }
    private getNextEnabledTab(idx: number): number | null {
      if (idx < 0) idx = this.tabs.length - 1;
      if (idx >= this.tabs.length) idx = 0;

      const startIdx = idx;

      do {
        if (!this.tabs[idx].hasAttribute('disabled')) {
          return idx;
        }
        idx = (idx + 1) % this.tabs.length;
      } while (idx !== startIdx);

      return null;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.tabs-root').forEach((root) => {
      new TabsManager(root as HTMLElement);
    });
  });
</script>
