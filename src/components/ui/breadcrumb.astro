---
import { cn } from "@/lib/utils";
import { cva, type VariantProps } from "class-variance-authority";

type BreadcrumbItem = {
  title: string;
  href?: string;
};

const Separators = {
  slash: `<svg xmlns="http://www.w3.org/2000/svg" class="size-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6"/></svg>`,
  arrow: `<svg xmlns="http://www.w3.org/2000/svg" class="size-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"/></svg>`,
  dot: `<svg xmlns="http://www.w3.org/2000/svg" class="size-1.5" viewBox="0 0 24 24" fill="currentColor"><circle cx="12" cy="12" r="12"/></svg>`,
} as const;

const breadcrumbVariants = cva(
  "flex items-center font-medium text-muted-foreground",
  {
    variants: {
      variant: {
        default: "gap-2.5",
        minimal: "gap-1.5",
        modern: "gap-3 bg-muted/30 px-3 py-1.5 rounded-md",
      },
      size: {
        sm: "text-xs",
        md: "text-sm",
        lg: "text-base",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "md",
    },
  },
);

const itemVariants = cva(
  "transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
  {
    variants: {
      variant: {
        default: "hover:text-foreground",
        minimal: "hover:text-accent-foreground hover:opacity-90",
        modern: "hover:text-primary hover:scale-105",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

// Props interface using VariantProps
interface Props extends VariantProps<typeof breadcrumbVariants> {
  items: BreadcrumbItem[];
  separator?: keyof typeof Separators;
  class?: string;
}

const {
  items,
  variant = "default",
  size = "md",
  separator = "slash",
  class: className,
} = Astro.props;
---

<nav
  class={cn(breadcrumbVariants({ variant, size }), className)}
  aria-label="Breadcrumb"
>
  <ol class="flex items-center">
    {
      items.map((item, index) => (
        <li class="inline-flex items-center">
          {index > 0 && (
            <span
              class="mx-2 text-muted-foreground/50"
              set:html={Separators[separator]}
            />
          )}
          {item.href ? (
            <a
              href={item.href}
              class={cn(
                itemVariants({ variant }),
                "inline-flex items-center gap-2",
              )}
            >
              {item.title}
            </a>
          ) : (
            <span class="text-foreground inline-flex items-center gap-2">
              {item.title}
            </span>
          )}
        </li>
      ))
    }
  </ol>
</nav>
